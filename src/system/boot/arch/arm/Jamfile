SubDir HAIKU_TOP src system boot arch arm ;

UsePrivateHeaders [ FDirName kernel platform $(TARGET_BOOT_PLATFORM) ] ;

# These must be recompiled due to differing wchar lengths in EFI
local librootArchSources =
	arch_string.S
;

local librootGenericSources =
	memset.c
;

local kernelLibArchObjects =
	<src!system!kernel!lib!arch!$(TARGET_ARCH)>byteorder.o
;

local kernelArchSources =
	arch_elf.cpp
	arch_uart_8250.cpp
;

local kernelDebugSources =
	blue_screen.cpp
	font.cpp
	font_spleen.cpp
	frame_buffer_console.cpp
;

local kernelGenericDriverSources =
	debug_uart_8250.cpp
;

local platform ;
for platform in [ MultiBootSubDirSetup u-boot efi ] {
    on $(platform) {
		DEFINES += _BOOT_MODE ;
		BootMergeObject [ FGristFiles boot_arch_$(TARGET_KERNEL_ARCH).o ] :
			# Kernel Drivers (src/system/kernel)
			$(kernelGenericDriverSources)
			$(kernelArchSources)

			arch_cpu.cpp

			# Reuse a subset of kernel debugging.
			kernel_stubs.cpp
			$(kernelDebugSources)

			$(librootGenericSources)
			$(librootArchSources)
			:
			:
			$(kernelLibArchObjects)
		;

		SEARCH on [ FGristFiles $(kernelGenericSources) ]
			= [ FDirName $(HAIKU_TOP) src system kernel arch $(TARGET_KERNEL_ARCH) ] ;

		SEARCH on [ FGristFiles $(kernelArchSources) ]
			= [ FDirName $(HAIKU_TOP) src system kernel arch $(TARGET_KERNEL_ARCH) ] ;

		SEARCH on [ FGristFiles $(kernelGenericDriverSources) ]
			= [ FDirName $(HAIKU_TOP) src system kernel arch generic ] ;

		SEARCH on [ FGristFiles $(librootArchSources) ]
			= [ FDirName $(HAIKU_TOP) src system libroot posix string arch $(TARGET_ARCH) ] ;

		SEARCH on [ FGristFiles $(librootGenericSources) ]
			= [ FDirName $(HAIKU_TOP) src system libroot posix string arch generic ] ;

		SEARCH on [ FGristFiles $(kernelDebugSources) ]
			= [ FDirName $(HAIKU_TOP) src system kernel debug ] ;
	}
}

